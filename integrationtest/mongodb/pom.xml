<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.hibernate.ogm</groupId>
        <artifactId>hibernate-ogm-integrationtest</artifactId>
        <version>4.1.0-SNAPSHOT</version>
    </parent>
    <artifactId>hibernate-ogm-integrationtest-mongodb</artifactId>
    <name>Hibernate OGM Integration Tests for MongoDB</name>
    <description>Hibernate OGM Integration Tests for MongoDB</description>

    <build>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <artifactId>maven-checkstyle-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-deploy-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
            </plugin>
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>hibernate-ogm-integrationtest-testcase</artifactId>
            <version>${project.version}</version>
            <type>test-jar</type>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>docker-mongodb</id>
            <activation>
                <property>
                    <name>useDocker</name>
                </property>
            </activation>
            <properties>
                <docker.image>pantinor/centos-mongodb</docker.image>
                <docker.daemon.ip>127.0.0.1</docker.daemon.ip>
                <docker.daemon.port>4243</docker.daemon.port>
                <docker.remove.container>true</docker.remove.container>
                <docker.container.service.port>27017</docker.container.service.port>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>com.jayway.restassured</groupId>
                    <artifactId>rest-assured</artifactId>
                    <version>1.8.1</version>
                    <scope>test</scope>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                      <plugin>
                          <groupId>org.codehaus.gmaven</groupId>
                          <artifactId>gmaven-plugin</artifactId>
                          <executions>
                              <execution>
                                  <id>start-docker-images</id>
                                  <phase>test</phase>
                                  <goals>
                                      <goal>execute</goal>
                                  </goals>
                                  <configuration>
                                      <source><![CDATA[
import com.jayway.restassured.RestAssured
import static com.jayway.restassured.RestAssured.*
import static com.jayway.restassured.matcher.RestAssuredMatchers.*
import com.jayway.restassured.path.json.JsonPath
import com.jayway.restassured.response.Response

RestAssured.baseURI = "http://${docker.daemon.ip}"
RestAssured.port = ${docker.daemon.port}

// here you can specify advance docker params, but the mandatory one is the name of the Image you want to use
def dockerImageConf = '{"Image":"${docker.image}"}'
def dockerImageName = JsonPath.from(dockerImageConf).get("Image")

log.info "Creating new Docker container from image $dockerImageName"
def response =  with().body(dockerImageConf).post("/containers/create")

if( 404 == response.statusCode ) {
    log.info "Docker image not found in local repo. Trying to dowload image '$dockerImageName' from remote repos"
    response = with().parameter("fromImage", dockerImageName).post("/images/create")
    def message = response.asString()
    //odd: rest api always returns 200 and doesn't return proper json. I have to grep
    if( message.contains("HTTP code: 404") ) fail("Image $dockerImageName NOT FOUND remotely. Abort. $message}")
    log.info "Image downloaded"
    
    // retry to create the container
    response = with().body(dockerImageConf).post("/containers/create")
    if( 404 == response.statusCode ) fail("Unable to create container with conf $dockerImageConf: ${response.asString()}")
}

def containerId = response.jsonPath().get("Id")

log.info "Container created with id $containerId"

// set the containerId to be retrieved later during the stop phase
project.properties.setProperty("containerId", "$containerId")

log.info "Starting container $containerId"
with().post("/containers/$containerId/start").asString()

def ip = with().get("/containers/$containerId/json").path("NetworkSettings.IPAddress")

log.info "Container started with ip: $ip" 

project.properties.setProperty("dockerIp", "$ip")
project.properties.setProperty("dockerPort", "${docker.container.service.port}")
]]>
                                      </source>
                                  </configuration>
                              </execution>
                              <execution>
                                  <id>stop-docker-images</id>
                                  <phase>post-integration-test</phase>
                                  <goals>
                                      <goal>execute</goal>
                                  </goals>
                                  <configuration>
                                      <source><![CDATA[
import com.jayway.restassured.RestAssured
import static com.jayway.restassured.RestAssured.*
import static com.jayway.restassured.matcher.RestAssuredMatchers.*

RestAssured.baseURI = "http://${docker.daemon.ip}"
RestAssured.port = ${docker.daemon.port}

def containerId = project.properties.getProperty('containerId')
log.info "Stopping Docker container $containerId"
with().post("/containers/$containerId/stop")
log.info "Docker container stopped"
if( true == ${docker.remove.container} ){
    with().delete("/containers/$containerId")
    log.info "Docker container deleted"
}
]]>
                                      </source>
                                  </configuration>
                              </execution>
                          </executions>
                      </plugin>
                      <plugin>
                          <artifactId>maven-failsafe-plugin</artifactId>
                          <configuration>
<!--                               <systemProperties>
                                  <property>
                                      <name>MONGODB_HOSTNAME</name>
                                      <value>${dockerIp}</value>
                                  </property>
                                  <property>
                                      <name>MONGODB_PORT</name>
                                      <value>${dockerPort}</value>
                                  </property>
                              </systemProperties> -->
                              <environmentVariables>
                                <MONGODB_HOSTNAME>${dockerIp}</MONGODB_HOSTNAME>
                                <MONGODB_PORT>${dockerPort}</MONGODB_PORT>
                              </environmentVariables>
                          </configuration>
                      </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>embedded-mongodb</id>
            <activation>
                <property>
                    <name>!useExternalMongoDb</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.gmaven</groupId>
                        <artifactId>gmaven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>log-info</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <source>
                                        println "[INFO] ------------------------------------------------------------------------";
                                        println "[INFO] MONGO DB BUILD INFO                                                     ";
                                        println "[INFO] ------------------------------------------------------------------------";
                                        println "[INFO] Extracting MongoDB distribution to ${embeddedMongoDbTempDir} and        ";
                                        println "[INFO] launching MongoDB process on port ${embeddedMongoDbPort}. The properties";
                                        println "[INFO] 'embeddedMongoDbTempDir' and 'embeddedMongoDbPort' can be used to       ";
                                        println "[INFO] specify another directory and/or port like this:                        ";
                                        println "[INFO]                                                                         ";
                                        println "[INFO]     mvn test -DembeddedMongoDbTempDir=%dir% -DembeddedMongoDbPort=%port%";
                                        println "[INFO]                                                                         ";
                                        println "[INFO] To use an external Mongo DB instance instead, specify the               ";
                                        println "[INFO] 'useExternalMongoDb' property:                                          ";
                                        println "[INFO]                                                                         ";
                                        println "[INFO]     mvn test -DuseExternalMongoDb                                       ";
                                        println "[INFO]                                                                         ";
                                        println "[INFO] In this case, host and port are retrieved from the environment          ";
                                        println "[INFO] variables MONGODB_HOSTNAME and MONGODB_PORT, respectively.              ";
                                        println "[INFO] ------------------------------------------------------------------------";
                                    </source>
                                </configuration>
                            </execution>
                            <execution>
                                <id>prepare-mongodb-directories</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <source>
                                        def tempDir = new File(project.properties['embeddedMongoDbTempDir']);
                                        ant.delete(dir : tempDir);
                                        ant.mkdir(dir : tempDir);

                                        def logDir = new File(project.properties['embeddedMongoDbLogDir']);
                                        ant.delete(dir : logDir);
                                        ant.mkdir(dir : logDir);

                                        System.setProperty( "de.flapdoodle.embed.io.tmpdir", "${embeddedMongoDbTempDir}" );
                                    </source>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <configuration>
                            <systemProperties>
                                <property>
                                    <name>MONGODB_HOSTNAME</name>
                                    <value>${embeddedMongoDbBindIp}</value>
                                </property>
                                <property>
                                    <name>MONGODB_PORT</name>
                                    <value>${embeddedMongoDbPort}</value>
                                </property>
                            </systemProperties>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>com.github.joelittlejohn.embedmongo</groupId>
                        <artifactId>embedmongo-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-embedded-mongodb</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>stop-embedded-mongodb</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
